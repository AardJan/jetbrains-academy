type: edu
files:
- name: banking/banking.py
  visible: true
  text: "# Write your code here\nimport random\nimport os\n\nACCOUNT_LIST = []\nLAST_ACCOUNT_NUMBER\
    \ = 1\nBANK_NUMBER = \"400000\"\n\ndef get_checksum(num_without_checksum):\n \
    \   num_list = [int(letter) for letter in num_without_checksum]\n    num_odd_mul\
    \ = [num*2 if idx%2 else num for idx ,num in enumerate(num_list,start=1)]\n  \
    \  num_min_9 = [x-9 if x>9 else x for x in num_odd_mul]\n    num_sum = sum(num_min_9)\n\
    \    for x in range(0, 10):\n        if (num_sum + x )%10 == 0:\n            return\
    \ str(x)\n    \n\ndef get_random_pin():\n    pin = str(random.randint(0, 9999))\n\
    \    if len(pin) < 4:\n        pin = pin.zfill(4)\n    return pin\n    \ndef get_account_number():\n\
    \    number = BANK_NUMBER\n    global LAST_ACCOUNT_NUMBER\n    account_internal_number\
    \ = str(LAST_ACCOUNT_NUMBER).zfill(9)\n    LAST_ACCOUNT_NUMBER = LAST_ACCOUNT_NUMBER\
    \ + 1\n    number = number + account_internal_number\n    check_sum = get_checksum(number)\n\
    \    number = number + check_sum\n    return account_internal_number, number\n\
    \    \nACCOUNT_LIST = []\nclass Account:\n    def __init__(self):\n        self.account_internal_number,\
    \ self.numer = get_account_number()\n        self.pin = get_random_pin()\n   \
    \     self.balance = 0\n    \n    def get_balance(self):\n        print(self.balance)\n\
    \        \ndef create_account():\n    new_account = Account()\n    ACCOUNT_LIST.append(new_account)\n\
    \    print(\"Your card number:\")\n    print(f\"{new_account.numer}\")\n    print(\"\
    Your card PIN:\")\n    print(f\"{new_account.pin}\")\n    \ndef log_in_account():\n\
    \    print(\"Enter your card number:\")\n    account_numer = input()\n    print(\"\
    Enter your PIN:\")\n    account_pin = input()\n    \n    if len(ACCOUNT_LIST)\
    \ > 0:\n        account = list(filter(lambda x: x.numer == account_numer and x.pin\
    \ == account_pin, ACCOUNT_LIST))\n        if len(account) == 1:\n            print(\"\
    You have successfully logged in!\")\n            while True:\n               \
    \ print(\"1. Balance\")\n                print(\"2. Log out\")\n             \
    \   print(\"0. Exit\")\n                \n                input_dec = int(input())\n\
    \                \n                if input_dec == 1:\n                    get_balance()\n\
    \                elif input_dec == 2:\n                    print(\"You have successfully\
    \ logged out!\")\n                    break\n                elif input_dec ==\
    \ 0:\n                    print(\"Bye!\")\n                    os._exit(os.EX_OK)\n\
    \        else:\n            print(\"Wrong card number or PIN!\")\n    else:\n\
    \        print(\"Wrong card number or PIN!\")\n\nwhile True:\n    print(\"1. Balance\"\
    )\n    print(\"2. Log out\")\n    print(\"0. Exit\")\n    \n    input_dec = int(input())\n\
    \    \n    if input_dec == 1:\n        create_account()\n    elif input_dec ==\
    \ 2:\n        log_in_account()\n    elif input_dec == 0:\n        print(\"Bye!\"\
    )\n        os._exit(os.EX_OK)\n    "
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.exceptions import WrongAnswerException
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from shutil import copy2
    import os
    import sqlite3
    import random
    import re

    card_number = ''
    pin = ''
    are_all_inputs_read = False
    db_file_name = 'card.s3db'
    temp_db_file_name = 'temp.s3db'


    def get_credentials(output: str):
        number = re.findall(r'400000\d{10}', output, re.MULTILINE)
        if not number:
            raise WrongAnswerException('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD,'
                                       ' where D is a digit.\nMake sure the card number is 16-digit length and '
                                       'you don\'t print any extra spaces at the end of the line!')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswerException('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.\n'
                                       'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'
                                       ' end of the line!')

        return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, correct_num_of_cards):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        are_all_inputs_read = True
        return '0'


    def check_db(output: str, value_to_return):
        if not os.path.exists(db_file_name):
            return CheckResult.wrong('Can\'t find db file named \'{}\''.format(db_file_name))
        try:
            copy2(db_file_name, temp_db_file_name)
        except Exception:
            return CheckResult.wrong('Can\'t copy database file!')

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute(
                    'SELECT name FROM sqlite_master WHERE type = \'table\' AND name NOT LIKE \'sqlite_%\';')
                for _ in response.fetchall():
                    if 'card' in _:
                        break
                else:
                    return CheckResult.wrong('Your database doesn\'t have a table named \'card\'')
        except Exception as exp:
            return CheckResult.wrong('Can\'t connect to the database!')

        correct_columns = (('ID', 'INTEGER'), ('NUMBER', 'TEXT'), ('PIN', 'TEXT'), ('BALANCE', 'INTEGER'))

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute('PRAGMA table_info(card);')
                real_columns = response.fetchall()
                for correct_column in correct_columns:
                    for real_column in real_columns:
                        real_column = [str(element).upper() for element in real_column]
                        if correct_column[0] in real_column and correct_column[1] in real_column:
                            break
                    else:
                        return CheckResult.wrong(
                            f'Can\'t find column named \'{correct_column[0].lower()}\' with \'{correct_column[1]}\' type.\n'
                            'Your table should have columns described in the stage instructions.')
        except Exception as ignored:
            return CheckResult.wrong('Can\'t connect to the database!')

        return CheckResult.correct()


    def check_db_rows(output, attach):
        correct_num_of_cards = 10
        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        with sqlite3.connect(db_file_name) as db:
            rows = db.execute('SELECT * FROM card').fetchall()
            for number in numbers:
                if len(number) != 16:
                    return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
                for row in rows:
                    if number in row:
                        break
                else:
                    return CheckResult.wrong('Your database doesn’t save newly created cards.\n'
                                             'Make sure you commit your DB changes right after saving a new card in the database!')
        return CheckResult.correct()


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin='0',
                    check_function=check_db,
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, 8),
                    ]),
                TestCase(
                    stdin='1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0',
                    check_function=check_db_rows
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ])
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')

        def after_all_tests(self):
            if os.path.exists('temp.s3db'):
                copy2('temp.s3db', 'card.s3db')
                os.remove('temp.s3db')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
- name: card.s3db
  visible: true
  learner_created: true
- name: banking/card.s3db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/109/stages/593/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 15 Dec 2020 08:09:12 UTC
record: 3
